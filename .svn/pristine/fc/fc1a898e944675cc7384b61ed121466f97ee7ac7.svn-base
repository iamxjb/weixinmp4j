/**
 * 包打听全知道-微信H5版本
 * weixin.user
 * UserTagManager.java
 * Ver0.0.1
 * 2016年6月21日-下午1:29:41
 *  2016全智道(北京)科技有限公司-版权所有
 * 
 */
package weixin.user;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import weixin.base.APIConfig;
import weixin.base.AccessTokenManager;
import weixin.util.HttpsDataManager;

/**
 * 
 * UserTagManager
 * 
 * 李华栋
 * 李华栋
 * 2016年6月21日 下午1:29:41
 * 
 * @version 0.0.1
 * 
 */
public class TagManager {

	
    /**
     * 
     * createTag创建标签)
     *一个公众号，最多可以创建100个标签。
     * @param tag
     * @return 
     *HashMap
     * @throws JSONException 
     * @exception 
     * @since  0.0.1
     */
	public HashMap createTag(String tag){
		HashMap<String, String> hm = new HashMap<String, String>();
		
		//构建请求信息
		JSONObject rootJson = new JSONObject();
		JSONObject subJson = new JSONObject();
		try {
			subJson.put("name", tag);
			rootJson.put("tag", subJson);
		} catch (JSONException e1) {
			e1.printStackTrace();
		}
		
		//调用创建标签接口
	    String url = APIConfig.CREATE_TAG+AccessTokenManager.accesstoken;
	    String response = HttpsDataManager.sendData(url, rootJson.toString());
	    
		//解析对应的JSON代码
	    try{
	    	JSONObject responseJson  = new JSONObject(response);
	    	JSONObject content = (JSONObject)responseJson.get("tag");
	    	hm.put("id", content.getString("id"));
	    	hm.put("name", content.getString("name"));
	    	hm.put("count", "0");
	    } catch(JSONException e){
	    	System.out.println(response);
	    }
	    
		return hm;
	}
	
	/**
	 * 
	 * getTag(获取公众号已创建的标签)
	 * @param tag
	 * @return 
	 *List
	 * @exception 
	 * @since  0.0.1
	 */
	public List getTag(String tag){
		//每一个list元素都是一个hashmap
		//map.put("id","1");
		//map.put("name","1");
		//map.put("count","1");
		
		List<HashMap> tagList = new ArrayList<HashMap>();
		HashMap<String, String> hm = null;
		
		//调用查询标签接口
	    String url = APIConfig.GET_TAG+AccessTokenManager.accesstoken;
	    String response = HttpsDataManager.sendData(url);//!!!HttpsDataManager需要有GET的请求方式
	    
		//解析对应的JSON代码
	    try{
	    	JSONObject responseJson  = new JSONObject(response);	
	    	JSONArray tags = (JSONArray) responseJson.get("tags");
	    	JSONObject content = null;
	    	for(int i=0;i<tags.length();i++){
	    		content = tags.getJSONObject(i);
	    		hm = new HashMap<String, String>();
	    		hm.put("id", content.getString("id"));
		    	hm.put("name", content.getString("name"));
		    	hm.put("count", content.getString("count"));
		    	tagList.add(hm);
	    	}
	    } catch(JSONException e){
	    	System.out.println(response);
	    }
	    
		return tagList;
	}
	
	/**
	 * 
	 * updateTag(编辑标签)
	 * @param id
	 * @param tag
	 * @return 
	 *boolean
	 * @exception 
	 * @since  0.0.1
	 */
	public boolean updateTag(int id,String tag){
		boolean success = false;
		
		//构建请求信息
		JSONObject rootJson = new JSONObject();
		JSONObject subJson = new JSONObject();
		try {
			subJson.put("id", id);
			subJson.put("name", tag);
			rootJson.put("tag", subJson);
		} catch (JSONException e1) {
			e1.printStackTrace();
		}
		
		//调用编辑标签接口
	    String url = APIConfig.UPDATE_TAG+AccessTokenManager.accesstoken;
	    String response = HttpsDataManager.sendData(url, rootJson.toString());
	    
		//解析对应的JSON代码
	    try{
	    	JSONObject responseJson  = new JSONObject(response);
	    	if(responseJson.getString("errmsg").equals("ok"))
	    		success = true;
	    } catch(JSONException e){
	    	System.out.println(response);
	    }
	    
	    return success;
	}
	
	/**
	 * 
	 * deleteTag(删除标签)
	 * 请注意，当某个标签下的粉丝超过10w时，后台不可直接删除标签。
	 * 此时，开发者可以对该标签下的openid列表，先进行取消标签的操作，
	 * 直到粉丝数不超过10w后，才可直接删除该标签。
	 * @param id
	 * @return 
	 *boolean
	 * @exception 
	 * @since  0.0.1
	 */
	public boolean deleteTag(int id){
		boolean success = false;
		
		//构建请求信息
		JSONObject rootJson = new JSONObject();
		JSONObject subJson = new JSONObject();
		try {
			subJson.put("id", id);
			rootJson.put("tag", subJson);
		} catch (JSONException e1) {
			e1.printStackTrace();
		}
		
		//调用删除标签接口
	    String url = APIConfig.DELETE_TAG+AccessTokenManager.accesstoken;
	    String response = HttpsDataManager.sendData(url, rootJson.toString());
	    
		//解析对应的JSON代码
	    try{
	    	JSONObject responseJson  = new JSONObject(response);
	    	if(responseJson.getString("errmsg").equals("ok"))
	    		success = true;
	    } catch(JSONException e){
	    	System.out.println(response);
	    }
	    
	    return success;
	}
	
	/**
	 * 
	 * getOpenidListByTag(获取标签下粉丝列表)
	 * 如果数据比较多的时候需要反复拉取
	 * @param id
	 * @param next_openid
	 * @return 
	 *List
	 * @exception 
	 * @since  0.0.1
	 */
	public List getOpenidListByTag(int id,String next_openid){
		List<String> userList = new ArrayList<String>();
		
		//构建请求信息
		JSONObject rootJson = new JSONObject();
		try {
			rootJson.put("tagid", id);
			rootJson.put("next_openid", next_openid);
		} catch (JSONException e1) {
			e1.printStackTrace();
		}
		
		//调用获取标签下粉丝列表接口
		String url = APIConfig.GET_USERLIST_TAG+AccessTokenManager.accesstoken;
	    String response = HttpsDataManager.sendData(url, rootJson.toString());
	    
	    //解析对应的JSON代码
	    try{
	    	JSONObject responseJson  = new JSONObject(response);
	    	JSONObject data = (JSONObject) responseJson.get("data");
	    	JSONArray openid = (JSONArray) data.get("openid");
	    	for(int i=0;i<openid.length();i++){
	    		userList.add(openid.get(0).toString());
	    	}
	    } catch(JSONException e){
	    	System.out.println(response);
	    }
		
		return userList;
	}
}
